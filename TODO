* in job.py, use _run_command evrywhere
* catch keybordInterrupt, especially for SSH connection. See signals
* traceback in log
* set logrotate period

MISC
----
* rewrite disk space usage
* minimize the # of SSH connections
* check that period can be float

Simple copy
-----------

It would be interesting for some usage to have just a copy with timestamp in the path.
It means the history flag can not be switch on/off but it is useful when you don't want changing filepaths especially for chained backups.
It would me to history or snapshot bool to a three positions flag: None, on, off.


Unittests
---------

Signals
-------
* Add signal support (SIGTERM, keybordinterupt...)
* we also need to record backtraces. Logging seems to support such feature with an exception() method.

Alerts
------
* Improve logging messages (debug, other are clean now)
* Improve logwatch script
* Doc. for logwatch (started)
  - Add example for the result
  - Check procedure

Snapshots
---------
* Implement different snapshots retentions (lin, log...)
* Add a callback in add_job to specify the method

SSH support
-----------
* connection down -> timeout
* symlink
* disk usage
* custom port (humm, can be specified in host file)

Tools
-----
Some tools can be developped
* to track the evolution of a specific file though snapshots...
* restore a snapshot


TOTEST
------
* jobs are uniq

TOCHECK
-------
* switch history false to true and conversly (started)

DELAYED
-------
* Send an email via logging when a job has not been performed for a while.

DONE
----
* Create symlinks to the last backups
* symlink should be relative
* symlink are not often created. (AttributeError)
* Do not start a job log file if nothing in it
* structure for source/dest type
* refactor _get_last_backup in job.py

CANCELED
--------
* When the script does not exit gracefully, remove bad snapshots
* In job, take datetime as parameter
* Do not keep a number of archives, but a ratio size of snapshots/size last snapshot
